{"version":3,"sources":["Scheming.coffee"],"names":[],"mappings":"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","file":"Scheming.js","sourceRoot":"/source/","sourcesContent":["# # Scheming\n\n# Support node.js or client environments\nroot = @\n\nisNode = typeof exports != 'undefined' && typeof module != 'undefined' && module.exports\n\nif isNode\n  _ = require 'lodash'\n  root = exports\n\n# uuid generator for anonymous Schemas\nuuid = ->\n  now = Date.now()\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace /[xy]/g, (c) ->\n    r = (now + Math.random() * 16) % 16 | 0\n    now = Math.floor now / 16\n    ((if c is \"x\" then r else (r & 0x7 | 0x8))).toString 16\n\nRESERVED_PROPERTIES =\n  validate : 'validate'\n\n###\n   ## Types\n  Scheming exports the default types that it uses for parsing schemas. You can extend with custom types, or\n  override the identifier / parser functions of the default types. \n###\nTYPES =\n  String  :\n    ctor       : String\n    string     : 'string'\n    identifier : _.isString\n    parser     : (val) ->\n      '' + val\n  Number  :\n    ctor       : Number\n    string     : 'number'\n    identifier : _.isNumber\n    parser     : parseFloat\n  Integer :\n    string     : 'integer'\n    identifier : (val) ->\n      _.isNumber(val) && val % 1 == 0\n    parser     : parseInt\n  Float   :\n    string     : 'float'\n    identifier : _.isNumber\n    parser     : parseFloat\n  Date    :\n    ctor       : Date\n    string     : 'date'\n    identifier : _.isDate\n    parser     : (val) ->\n      new Date val\n  Boolean :\n    ctor       : Boolean\n    string     : 'boolean'\n    identifier : _.isBoolean\n    parser     : (val) ->\n      !!val\n  Mixed   :\n    ctor       : (val) ->\n      val\n    string     : '*'\n    identifier : ->\n      true\n    parser     : _.identity\n\n# parsers for nested types are dynamic and must be built at resolution time\nNESTED_TYPES =\n  Array  :\n    ctor        : Array\n    string      : 'array'\n    identifier  : _.isArray\n    childType   : null\n    parser      : _.toArray\n    childParser : _.toArray\n  Schema :\n    ctor       : Object\n    string     : 'schema'\n    identifier : null\n    childType  : null\n    parser     : null\n\ngetPrimitiveTypeOf = (type) ->\n  for k, TYPE of TYPES\n    if type == TYPE or\n        (TYPE.ctor && type == TYPE.ctor) or\n        type?.toLowerCase?() == TYPE.string\n\n      return TYPE\n\n  return null\n\nScheming = {TYPES, NESTED_TYPES, RESERVED_PROPERTIES}\n\nScheming.resolveType = (typeDef) ->\n  type = getPrimitiveTypeOf typeDef\n\n  if !type?\n    if _.isArray typeDef\n      type = _.cloneDeep NESTED_TYPES.Array\n      childType = TYPES.Mixed\n\n      if typeDef.length\n        childType = Scheming.resolveType(typeDef[0])\n\n      type.childType = childType\n      type.childParser = (val) ->\n        for index, member of val\n          if !childType.identifier(member)\n            val[index] = childType.parser(member)\n\n        return val\n\n    resolveSchemaType = (type, childType) ->\n      type.childType = childType\n      type.identifier = (val) ->\n        return val instanceof childType\n      type.parser = (val) ->\n        return new childType(val)\n\n    if _.isPlainObject typeDef\n      type = _.cloneDeep NESTED_TYPES.Schema\n      childType = Scheming.create typeDef\n      resolveSchemaType type, childType\n\n    if _.isFunction(typeDef) && typeDef.__skemaId\n      type = _.cloneDeep NESTED_TYPES.Schema\n      childType = typeDef\n      resolveSchemaType type, childType\n\n    if _.isString(typeDef) && typeDef[...7] == 'Schema:'\n      type = _.cloneDeep NESTED_TYPES.Schema\n      childType = typeDef[7..]\n      for fn in ['identifier', 'parser']\n        do (fn) ->\n          type[fn] = (val) ->\n            childType = Scheming.get childType\n            if !childType\n              throw new Error \"Error resolving #{typeDef} on lazy initialization\"\n            resolveSchemaType type, childType\n\n            return type[fn] val\n\n  return type || null\n\nScheming.normalizeProperty = (config, fieldName) ->\n  definition =\n    type       : null\n    default    : null\n    getter     : null\n    setter     : null\n    validators : null\n    required   : false\n\n  if !(_.isPlainObject(config) && config.type?)\n    config = {type : config}\n\n  {type, getter, setter, validate, required} = config\n\n  if !type?\n    throw new Error \"Error resolving #{fieldName}. Schema type must be defined.\"\n  if getter? && !_.isFunction getter\n    throw new Error \"Error resolving #{fieldName}. Schema getter must be a function.\"\n  if setter? && !_.isFunction setter\n    throw new Error \"Error resolving #{fieldName}. Schema setter must be a function.\"\n\n  validate ?= []\n  if !_.isArray(validate)\n    validate = [validate]\n  for fn in validate\n    if !_.isFunction fn\n      throw new Error \"Error resolving #{fieldName}. Schema validate must be a function or array of functions.\"\n\n  definition.type = Scheming.resolveType type\n\n  if !definition.type?\n    throw new Error \"Error resolving #{fieldName}. Unrecognized type #{type}\"\n\n  definition.default = config.default\n  definition.getter = getter\n  definition.setter = setter\n  definition.validators = validate\n  definition.required = required\n\n  return definition\n\n###\nopts:\n  strict - if false, allows attachment of arbitrary properties to object\n###\n## TODO: How to deal with arrays and array mutations for watching\n## TODO: allowArbitrary : Object.seal - prevent adding / removing of properties\n## TODO: support strict assignment, so rather than parse, throw an error?\n###\n  Doc notes -\n   - parsers are applied before setters; setters can assume they are receiving correct type\n\n###\n# name, schemaConfig, opts\nregistry = {}\n\naddToRegistry = (key, value) ->\n  if registry[key]\n    throw new Error \"Naming conflict encountered. Schema #{key} already exists\"\n  registry[key] = value\n\nScheming.get = (name) ->\n  return registry[name]\n\nScheming.reset = ->\n  registry = {}\n\nScheming.create = (args...) ->\n  if !_.isString(args[0])\n    args.unshift uuid()\n\n  [name, schemaConfig, opts] = args\n\n  normalizedSchema = {}\n\n  class Schema\n    @__skemaId : name\n\n    @defineProperties : (config) ->\n      for k, v of config\n        @defineProperty k, v\n\n    @defineProperty : (fieldName, config) ->\n      normalizedSchema[fieldName] = Scheming.normalizeProperty(config, fieldName)\n\n    constructor : (model) ->\n      data = {}\n\n      Object.defineProperty @, '__skemaId',\n        enumerable   : false\n        configurable : false\n        writable     : false\n        value        : Schema.__skemaId\n\n      for fieldName, typeDefinition of normalizedSchema\n        do (fieldName, typeDefinition) =>\n          {type, getter, setter} = typeDefinition\n\n          Object.defineProperty @, fieldName,\n            configurable : true\n            enumerable   : true\n            get          : ->\n              val = data[fieldName]\n              if val is undefined\n                return val\n              if type.string == NESTED_TYPES.Array.string\n                val = type.childParser val\n              if getter\n                val = getter val\n              return val\n            set          : (val) ->\n              if !type.identifier(val)\n                val = type.parser val\n              if setter\n                val = setter val\n              data[fieldName] = val\n\n          if typeDefinition.default is not undefined\n            @[fieldName] = typeDefinition.default\n\n      for key, value of model\n        @[key] = value\n\n      @validate = () ->\n        errors = {}\n        # prevents infinite loops in circular references\n        if @_validating then return null\n        @_validating = true\n\n        pushError = (key, err) ->\n          if _.isArray err\n            return pushError(key, e) for e in err\n          if !_.isString err\n            err = 'Validation error occurred.'\n          errors[key] ?= []\n          errors[key].push err\n\n        # apply validation rules\n        for key, value of normalizedSchema\n\n          {validators, required} = value\n\n          val = @[key]\n\n          if required && !val?\n            pushError key, \"Field is required.\"\n          if val?\n            {type} = normalizedSchema[key]\n\n            for validator in validators\n              err = true\n              try\n                err = validator(val)\n              catch e\n                if e then err = e.message\n              if err != true then pushError key, err\n\n            if type.string == 'schema'\n              childErrors = val.validate()\n              for k, v of childErrors\n                pushError \"#{key}.#{k}\", v\n            if type.string == 'array' && type.childType.string == 'schema'\n              for member, i in val\n                childErrors = member.validate()\n                for k, v of childErrors\n                  pushError \"#{key}[#{i}].#{k}\", v\n\n        @_validating = false\n\n        if _.size(errors) == 0\n          return null\n        else\n          return errors\n\n  Schema.defineProperties schemaConfig\n\n  addToRegistry name, Schema\n\n  return Schema\n\nexports.Scheming = Scheming"]}